{"version":3,"sources":["Components/APIDataCharts/EventsDailyComponent.js","Components/MapComponents/MapComponent.js","App.js","serviceWorker.js","index.js"],"names":["EventsDailyComponent","daysOfTheWeek","useState","apiData","setApiData","useEffect","axios","get","then","res","dataArr","result","i","push","1","2","3","4","day","forEach","data","Date","date","getDay","id","poi_id","events","Number","prevState","translateData","catch","err","console","log","style","padding","Header","as","dividing","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","value","offset","position","name","type","stroke","MapComponent","apiPoiData","setApiPoiData","lat","lng","defaultCenter","setDefaultCenter","zoom","activeItem","setActiveItem","google","window","getEvents","length","dayIndex","indexOf","handleItemClick","e","calculateIntensity","lon","Grid","Column","Menu","fluid","vertical","tabular","Item","active","onClick","stretched","Segment","options","center","overlays","maps","Marker","title","Circle","fillColor","fillOpacity","strokeWeight","radius","minHeight","onZoomChanged","App","className","Boolean","location","hostname","match","defaults","baseURL","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2eb3fc7a.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Label\n} from \"recharts\";\nimport { Header } from \"semantic-ui-react\";\n\nconst EventsDailyComponent = () => {\n  const daysOfTheWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n  const [apiData, setApiData] = useState([]);\n\n  const translateData = dataArr => {\n    const result = [];\n    for (let i = 0; i < 7; i++) {\n      result.push({ 1: 0, 2: 0, 3: 0, 4: 0, day: daysOfTheWeek[i] });\n    }\n\n    dataArr.forEach(data => {\n      const day = new Date(data.date).getDay();\n      const id = data.poi_id;\n      const events = Number(data.events);\n\n      result[day][id] += events;\n    });\n\n    result.forEach(day => {\n      setApiData(prevState => [...prevState, day]);\n    })\n\n    \n  };\n\n  useEffect(() => {\n    axios\n      .get(`/events/daily/`)\n      .then(res => {\n        translateData(res.data);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, []);\n\n  return (\n    <div style={{ padding: \"5%\" }}>\n      <Header as=\"h3\" dividing>\n        Daily Events of week: Jan 1 - 15\n      </Header>\n      <LineChart\n        width={730}\n        height={250}\n        data={apiData}\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"day\">\n          <Label value=\"Days of the week\" offset={-10}  position= \"insideBottomRight\"></Label>\n        </XAxis>\n        <YAxis>\n        <Label value=\"Events\" offset={-20}  position= \"left\"></Label>\n        </YAxis>\n        <Tooltip />\n        <Legend />\n        <Line name=\"EQ Works\" type=\"monotone\" dataKey=\"1\" stroke=\"#8884d8\" />\n        <Line name=\"CN Tower\" type=\"monotone\" dataKey=\"2\" stroke=\"#82ca9d\" />\n        <Line name=\"Niagara Falls\" type=\"monotone\" dataKey=\"3\" stroke=\"#b41e22\" />\n        <Line name=\"Vancouver Harbour\" type=\"monotone\" dataKey=\"4\" stroke=\"#d66826\" />\n      </LineChart>\n    </div>\n  );\n};\n\nexport default EventsDailyComponent;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { GMap } from \"primereact/gmap\";\nimport { Grid, Menu, Segment } from \"semantic-ui-react\";\n\nconst MapComponent = () => {\n  const [apiPoiData, setApiPoiData] = useState([]);\n  const [apiData, setApiData] = useState([]);\n  const [defaultCenter, setDefaultCenter] = useState({\n    lat: 43.6532,\n    lng: -79.3832\n  });\n  const [zoom, setZoom] = useState(12);\n\n  const [activeItem, setActiveItem] = useState(\"Sunday\");\n\n  const google = window.google;\n  const daysOfTheWeek = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\"\n  ];\n\n  const updateZoom = () => {};\n\n  const getEvents = (day, id) => {\n    if (apiData.length > 0) {\n      const dayIndex = daysOfTheWeek.indexOf(day);\n      const events = apiData[dayIndex][id];\n      return events;\n    }\n  };\n\n  const translateData = dataArr => {\n    const result = [];\n    for (let i = 0; i < 7; i++) {\n      result.push({ 1: 0, 2: 0, 3: 0, 4: 0, day: daysOfTheWeek[i] });\n    }\n\n    dataArr.forEach(data => {\n      const day = new Date(data.date).getDay();\n      const id = data.poi_id;\n      const events = Number(data.events);\n\n      result[day][id] += events;\n    });\n\n    result.forEach(day => {\n      setApiData(prevState => [...prevState, day]);\n    });\n  };\n\n  const handleItemClick = (e, { name }) => {\n    setActiveItem(name);\n  };\n\n  const calculateIntensity = (day, id) => {\n    if (apiData.length > 0) {\n      const dayIndex = daysOfTheWeek.indexOf(day);\n      const events = apiData[dayIndex][id];\n      return events * 300;\n    }\n  };\n\n  const mapOptions = () => {\n    return {\n      center: defaultCenter,\n      zoom: zoom\n    };\n  };\n\n  const overlays = () => {\n    if (apiPoiData.length > 0) {\n      return [\n        new google.maps.Marker({\n          position: { lat: apiPoiData[0].lat, lng: apiPoiData[0].lon },\n          title: `${apiPoiData[0].name} events: ${getEvents(\n            activeItem,\n            apiPoiData[0].poi_id\n          )}`\n        }),\n        new google.maps.Circle({\n          center: { lat: apiPoiData[0].lat, lng: apiPoiData[0].lon },\n          fillColor: \"#8884d8\",\n          fillOpacity: 0.35,\n          strokeWeight: 1,\n          radius: calculateIntensity(activeItem, apiPoiData[0].poi_id)\n        }),\n        new google.maps.Marker({\n          position: { lat: apiPoiData[1].lat, lng: apiPoiData[1].lon },\n          title: `${apiPoiData[1].name} events: ${getEvents(\n            activeItem,\n            apiPoiData[1].poi_id\n          )}`\n        }),\n        new google.maps.Circle({\n          center: { lat: apiPoiData[1].lat, lng: apiPoiData[1].lon },\n          fillColor: \"#82ca9d\",\n          fillOpacity: 0.35,\n          strokeWeight: 1,\n          radius: calculateIntensity(activeItem, apiPoiData[1].poi_id)\n        }),\n        new google.maps.Marker({\n          position: { lat: apiPoiData[2].lat, lng: apiPoiData[2].lon },\n          title: `${apiPoiData[2].name} events: ${getEvents(\n            activeItem,\n            apiPoiData[2].poi_id\n          )}`\n        }),\n        new google.maps.Circle({\n          center: { lat: apiPoiData[2].lat, lng: apiPoiData[2].lon },\n          fillColor: \"#b41e22\",\n          fillOpacity: 0.35,\n          strokeWeight: 1,\n          radius: calculateIntensity(activeItem, apiPoiData[2].poi_id)\n        }),\n        new google.maps.Marker({\n          position: { lat: apiPoiData[3].lat, lng: apiPoiData[3].lon },\n          title: `${apiPoiData[3].name} events: ${getEvents(\n            activeItem,\n            apiPoiData[3].poi_id\n          )}`\n        }),\n        new google.maps.Circle({\n          center: { lat: apiPoiData[3].lat, lng: apiPoiData[3].lon },\n          fillColor: \"#d66826\",\n          fillOpacity: 0.35,\n          strokeWeight: 1,\n          radius: calculateIntensity(activeItem, apiPoiData[3].poi_id)\n        })\n      ];\n    }\n  };\n\n  useEffect(() => {\n    axios\n      .get(`/events/daily/`)\n      .then(res => {\n        translateData(res.data);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, []);\n\n  useEffect(() => {\n    axios\n      .get(\"/poi\")\n      .then(res => {\n        // console.log(res.data);\n        setApiPoiData(res.data);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (apiPoiData.length > 0) {\n      setDefaultCenter({ lat: apiPoiData[3].lat, lng: apiPoiData[3].lon });\n    }\n  }, [apiPoiData]);\n\n  return (\n    <div>\n      <Grid>\n        <Grid.Column width={4}>\n          <Menu fluid vertical tabular>\n            <Menu.Item\n              name=\"Sunday\"\n              active={activeItem === \"Sunday\"}\n              onClick={handleItemClick}\n            />\n            <Menu.Item\n              name=\"Monday\"\n              active={activeItem === \"Monday\"}\n              onClick={handleItemClick}\n            />\n            <Menu.Item\n              name=\"Tuesday\"\n              active={activeItem === \"Tuesday\"}\n              onClick={handleItemClick}\n            />\n            <Menu.Item\n              name=\"Wednesday\"\n              active={activeItem === \"Wednesday\"}\n              onClick={handleItemClick}\n            />\n            <Menu.Item\n              name=\"Thursday\"\n              active={activeItem === \"Thursday\"}\n              onClick={handleItemClick}\n            />\n            <Menu.Item\n              name=\"Friday\"\n              active={activeItem === \"Friday\"}\n              onClick={handleItemClick}\n            />\n            <Menu.Item\n              name=\"Saturday\"\n              active={activeItem === \"Saturday\"}\n              onClick={handleItemClick}\n            />\n          </Menu>\n        </Grid.Column>\n\n        <Grid.Column stretched width={12}>\n          <Segment>\n            <GMap\n              options={mapOptions()}\n              overlays={overlays()}\n              style={{ width: \"100%\", minHeight: \"320px\" }}\n              onZoomChanged={updateZoom}\n            />\n          </Segment>\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n};\n\nexport default MapComponent;\n","import React from 'react';\nimport './App.css';\nimport PoiComponent from \"./Components/APIDataCharts/PoiComponent\";\nimport EventsDailyComponent from \"./Components/APIDataCharts/EventsDailyComponent\";\nimport StatsDailyComponent from \"./Components/APIDataCharts/StatsDailyComponent\";\nimport StatsHourlyComponent from \"./Components/APIDataCharts/StatsHourlyComponent\";\nimport EventsHourlyComponent from './Components/APIDataCharts/EventsHourlyComponent';\nimport MapComponent from \"./Components/MapComponents/MapComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{}}>\n      {/* <EventsHourlyComponent/> */}\n      <EventsDailyComponent/>\n      {/* <StatsDailyComponent/>\n      <StatsHourlyComponent/> */}\n      <MapComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\nimport axios from 'axios'\n\naxios.defaults.baseURL = `https://andyzen619-eq-works-server-2.glitch.me/`;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}